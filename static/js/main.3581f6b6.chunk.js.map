{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomUrl","asyncToGenerator","regenerator_default","a","mark","_callee","myHeaders","wrap","_context","prev","next","Headers","append","fetch","mode","header","then","response","json","body","url","concat","query","random","id","fetchWikiData","catch","error","console","stop","arguments","length","undefined","sujet","state","pathName","subject","value","setState","loading","window","location","pathname","replace","_this2","document","addEventListener","progressBar","scrolled","scrollTop","documentElement","scrollHeight","clientHeight","style","width","Math","round","_this3","react_default","createElement","className","ref","el","type","placeholder","onClick","parse","Fragment","title","dangerouslySetInnerHTML","__html","text","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3581f6b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      pathName:\n        window.location.pathname.replace('/wiki/', '') ||\n        'Agriculture_in_Saudi_Arabia'\n    };\n    this.getRandomUrl();\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', () => {\n      if (!this.progressBar) {\n        return;\n      }\n      const winScroll =\n        document.body.scrollTop || document.documentElement.scrollTop;\n      const height =\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight;\n      const scrolled = (winScroll / height) * 100;\n      this.progressBar.style.width = Math.round(scrolled) + '%';\n    });\n  }\n\n  getRandomUrl = async () => {\n    const myHeaders = new Headers();\n    myHeaders.append('Origin', '*');\n\n    fetch(\n      'https://fr.wikipedia.org/w/api.php?action=query&list=random&rnlimit=1&format=json&origin=*',\n      {\n        mode: 'cors',\n        header: myHeaders\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(body => {\n        const url = `https://fr.wikipedia.org/w/api.php?action=parse&pageid=${\n          body.query.random[0].id\n        }&format=json&origin=*`;\n        this.fetchWikiData(url);\n      })\n      .catch(error => console.error(error));\n  };\n\n  fetchWikiData = (url = '') => {\n    const myHeaders = new Headers();\n    myHeaders.append('Origin', '*');\n\n    const sujet = this.state.pathName || (this.subject && this.subject.value);\n\n    fetch(\n      url ||\n        `https://fr.wikipedia.org/w/api.php?action=parse&page=${sujet}&format=json&origin=*`,\n      {\n        mode: 'cors',\n        header: myHeaders\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(body => {\n        this.setState({ body, loading: false });\n      })\n      .catch(error => console.error(error));\n  };\n\n  render() {\n    const { body } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"progress-bar\">\n          <div ref={el => (this.progressBar = el)} />\n        </div>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            ref={el => (this.subject = el)}\n            placeholder=\"Rechercher un article\"\n          />\n          <button type=\"submit\" onClick={this.fetchWikiData}>\n            Go\n          </button>\n        </div>\n        <div className=\"random\">\n          <button type=\"submit\" onClick={this.getRandomUrl}>\n            Random\n          </button>\n        </div>\n        {body && body.parse && (\n          <>\n            <h1>{body.parse.title}</h1>\n            <div\n              dangerouslySetInnerHTML={{\n                __html: body.parse.text['*']\n              }}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}