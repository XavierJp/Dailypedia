{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchWikiData","subject","arguments","length","undefined","myHeaders","Headers","append","sujet","value","fetch","concat","mode","header","then","response","json","body","setState","loading","catch","error","console","state","_this2","react_default","a","createElement","className","Fragment","ref","el","onClick","parse","title","dangerouslySetInnerHTML","__html","text","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAyDeA,qBArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,cAAgB,WAAwC,IAAvCC,EAAuCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA7B,4BACnBG,EAAY,IAAIC,QACtBD,EAAUE,OAAO,SAAU,KAE3B,IAAMC,EAASf,EAAKQ,SAAWR,EAAKQ,QAAQQ,OAAUR,EACtDS,MAAK,wDAAAC,OAEqDH,EAFrD,yBAIH,CACEI,KAAM,OACNC,OAAQR,IAGTS,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJxB,EAAKyB,SAAS,CAAED,OAAME,SAAS,MAEhCC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,MA1BhC5B,EAAK8B,MAAQ,CACXJ,SAAS,GAEX1B,EAAKO,gBANYP,wEAgCV,IAAA+B,EAAA5B,KACCqB,EAASrB,KAAK2B,MAAdN,KACR,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZX,GACCQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAG,SAAA,KACEJ,EAAAC,EAAAC,cAAA,SAAOG,IAAK,SAAAC,GAAE,OAAKP,EAAKvB,QAAU8B,KAClCN,EAAAC,EAAAC,cAAA,UAAQK,QAASpC,KAAKI,eAAtB,MACAyB,EAAAC,EAAAC,cAAA,UAAKV,EAAKgB,MAAMC,OAChBT,EAAAC,EAAAC,cAAA,OACEQ,wBAAyB,CACvBC,OAAQnB,EAAKgB,MAAMI,KAAK,iBA5CtBC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.69903b3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true\n    };\n    this.fetchWikiData();\n  }\n\n  fetchWikiData = (subject = 'Fonction_Ã _sens_unique') => {\n    const myHeaders = new Headers();\n    myHeaders.append('Origin', '*');\n\n    const sujet = (this.subject && this.subject.value) || subject;\n    fetch(\n      // 'https://fr.wikipedia.org/w/api.php?action=query&list=random&rnlimit=5&format=json&origin=*',\n      `https://fr.wikipedia.org/w/api.php?action=parse&page=${sujet}&format=json&origin=*`,\n      // `https://en.wikipedia.org/w/api.php?action=parse&page=Agriculture_in_Saudi_Arabia&format=json&origin=*`,\n      {\n        mode: 'cors',\n        header: myHeaders\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(body => {\n        this.setState({ body, loading: false });\n      })\n      .catch(error => console.error(error));\n  };\n\n  render() {\n    const { body } = this.state;\n    return (\n      <div className=\"App\">\n        {body && (\n          <>\n            <input ref={el => (this.subject = el)} />\n            <button onClick={this.fetchWikiData}>Go</button>\n            <h1>{body.parse.title}</h1>\n            <div\n              dangerouslySetInnerHTML={{\n                __html: body.parse.text['*']\n              }}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}