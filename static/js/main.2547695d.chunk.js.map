{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["zap","react_default","a","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","RANDOM_URL","ARTICLE_BY_ID","ARTICLME_BY_TITLE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","myHeaders","response","wrap","_context","prev","next","Headers","append","fetch","mode","header","sent","abrupt","json","stop","_x","apply","arguments","getRandomUrl","_callee2","dataRandom","urlById","data","_context2","randomBttn","classList","add","replace","query","random","id","console","log","setState","body","loading","document","documentElement","scrollTop","remove","t0","error","fetchWikiData","_callee3","sujet","_args3","_context3","length","undefined","state","pathName","subject","value","p","window","location","pathname","split","_this2","addEventListener","progressBar","scrolled","scrollHeight","clientHeight","style","Math","round","_this3","className","ref","el","type","onClick","parse","Fragment","title","dangerouslySetInnerHTML","__html","text","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAGMA,SACJC,EAAAC,EAAAC,cAAA,OACEC,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZC,cAAc,QACdC,eAAe,SAEfX,EAAAC,EAAAC,cAAA,WAASU,OAAO,6CAIdC,EACJ,2GACIC,EAAa,2FACbC,EAAiB,yFAqIRC,cAnIb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA6BRQ,UA9BmB,eAAAC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAA3B,EAAA4B,KA8BP,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAL,EAAA3B,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACJL,EAAY,IAAIM,SACZC,OAAO,SAAU,KAFjBJ,EAAAE,KAAA,EAIaG,MAAMT,EAAK,CAChCU,KAAM,OACNC,OAAQV,IANA,cAIJC,EAJIE,EAAAQ,KAAAR,EAAAS,OAAA,SASHX,EAASY,QATN,wBAAAV,EAAAW,SAAAhB,EAAAT,SA9BO,gBAAA0B,GAAA,OAAArB,EAAAsB,MAAA3B,KAAA4B,YAAA,GAAA/B,EA0CnBgC,aA1CmB/B,OAAAQ,EAAA,EAAAR,CAAAS,EAAA3B,EAAA4B,KA0CJ,SAAAsB,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAA1B,EAAA3B,EAAAiC,KAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cAAAkB,EAAAnB,KAAA,EAEPlB,EAAKsC,YACPtC,EAAKsC,WAAWC,UAAUC,IAAI,WAHrBH,EAAAlB,KAAA,EAKcnB,EAAKO,UAAUZ,GAL7B,cAKLuC,EALKG,EAAAZ,KAOLU,EAAUvC,EAAc6C,QAC5B,eACAP,EAAWQ,MAAMC,OAAO,GAAGC,IAE7BC,QAAQC,IAAIZ,GAXDG,EAAAlB,KAAA,EAaQnB,EAAKO,UAAU4B,GAbvB,OAaLC,EAbKC,EAAAZ,KAeXzB,EAAK+C,SAAS,CAAEC,KAAMZ,EAAMa,SAAS,GAAS,WAC5CC,SAASC,gBAAgBC,UAAY,EACrCF,SAASF,KAAKI,UAAY,EACtBpD,EAAKsC,YACPtC,EAAKsC,WAAWC,UAAUc,OAAO,aAnB1BhB,EAAAlB,KAAA,iBAAAkB,EAAAnB,KAAA,GAAAmB,EAAAiB,GAAAjB,EAAA,SAuBXQ,QAAQU,MAARlB,EAAAiB,IAvBW,yBAAAjB,EAAAT,SAAAK,EAAA9B,KAAA,aA1CIH,EAqEnBwD,cArEmBvD,OAAAQ,EAAA,EAAAR,CAAAS,EAAA3B,EAAA4B,KAqEH,SAAA8C,IAAA,IAAA5C,EAAA6C,EAAAtB,EAAAuB,EAAA5B,UAAA,OAAArB,EAAA3B,EAAAiC,KAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,cAAON,EAAP8C,EAAAE,OAAA,QAAAC,IAAAH,EAAA,GAAAA,EAAA,GAAa,GACvB3D,EAAKsC,YACPtC,EAAKsC,WAAWC,UAAUC,IAAI,WAE1BkB,EAAQ1D,EAAK+D,MAAMC,UAAahE,EAAKiE,SAAWjE,EAAKiE,QAAQC,MAJrDN,EAAAzC,KAAA,EAMKnB,EAAKO,UACtBM,GAAOhB,EAAkB4C,QAAQ,eAAOiB,IAP5B,OAMRtB,EANQwB,EAAAnC,KAUdzB,EAAK+C,SAAS,CAAEC,KAAMZ,EAAMa,SAAS,GAAS,WAC5CC,SAASC,gBAAgBC,UAAY,EACrCF,SAASF,KAAKI,UAAY,EACtBpD,EAAKsC,YACPtC,EAAKsC,WAAWC,UAAUc,OAAO,aAdvB,wBAAAO,EAAAhC,SAAA6B,EAAAtD,SAlEd,IAAMgE,EAAIC,OAAOC,SAASC,SAASC,MAAM,UAHxB,OAIjBvE,EAAK+D,MAAQ,CACXd,SAAS,EACTe,SAAUG,EAAEA,EAAEN,OAAS,IAAM,MAE1B7D,EAAK+D,MAAMC,SAGdhE,EAAKwD,gBAFLxD,EAAKgC,eATUhC,mFAeC,IAAAwE,EAAArE,KAClB+C,SAASuB,iBAAiB,SAAU,WAClC,GAAKD,EAAKE,YAAV,CAGA,IAKMC,GAJJzB,SAASF,KAAKI,WAAaF,SAASC,gBAAgBC,YAEpDF,SAASC,gBAAgByB,aACzB1B,SAASC,gBAAgB0B,cACa,IACxCL,EAAKE,YAAYI,MAAM5F,MAAQ6F,KAAKC,MAAiB,IAAXL,GAAkB,IAAM,wCA8D7D,IAAAM,EAAA9E,KACC6C,EAAS7C,KAAK4D,MAAdf,KAER,OADAH,QAAQC,IAAIE,GAEVlE,EAAAC,EAAAC,cAAA,OAAKkG,UAAU,OACbpG,EAAAC,EAAAC,cAAA,OAAKkG,UAAU,gBACbpG,EAAAC,EAAAC,cAAA,OAAKmG,IAAK,SAAAC,GAAE,OAAKH,EAAKP,YAAcU,MAYtCtG,EAAAC,EAAAC,cAAA,OAAKkG,UAAU,UACbpG,EAAAC,EAAAC,cAAA,UACEqG,KAAK,SACLC,QAASnF,KAAK6B,aACdmD,IAAK,SAAAC,GAAE,OAAKH,EAAK3C,WAAa8C,IAE9BtG,EAAAC,EAAAC,cAAA,OAAKkG,UAAU,UACfpG,EAAAC,EAAAC,cAAA,OAAKkG,UAAU,WAAWrG,KAG7BmE,GAAQA,EAAKuC,OACZzG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyG,SAAA,KACE1G,EAAAC,EAAAC,cAAA,UAAKgE,EAAKuC,MAAME,OAChB3G,EAAAC,EAAAC,cAAA,OACE0G,wBAAyB,CACvBC,OAAQ3C,EAAKuC,MAAMK,KAAK,iBA1HtBC,aCXEC,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OAAOpH,EAAAC,EAAAC,cAACmH,EAAD,MAASjD,SAASkD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2547695d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst zap = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\" />\n  </svg>\n);\n\nconst RANDOM_URL =\n  'https://fr.wikipedia.org/w/api.php?action=query&list=random&rnlimit=1&rnnamespace=0&format=json&origin=*';\nconst ARTICLE_BY_ID = `https://fr.wikipedia.org/w/api.php?action=parse&pageid=§§§&format=json&origin=*`;\nconst ARTICLME_BY_TITLE = `https://fr.wikipedia.org/w/api.php?action=parse&page=§§§&format=json&origin=*`;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const p = window.location.pathname.split('/wiki/');\n    this.state = {\n      loading: true,\n      pathName: p[p.length - 1] || null\n    };\n    if (!this.state.pathName) {\n      this.getRandomUrl();\n    } else {\n      this.fetchWikiData();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', () => {\n      if (!this.progressBar) {\n        return;\n      }\n      const winScroll =\n        document.body.scrollTop || document.documentElement.scrollTop;\n      const height =\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight;\n      const scrolled = (winScroll / height) * 100;\n      this.progressBar.style.width = Math.round(scrolled * 100) / 100 + '%';\n    });\n  }\n\n  fetchData = async url => {\n    const myHeaders = new Headers();\n    myHeaders.append('Origin', '*');\n\n    const response = await fetch(url, {\n      mode: 'cors',\n      header: myHeaders\n    });\n\n    return response.json();\n  };\n\n  getRandomUrl = async () => {\n    try {\n      if (this.randomBttn) {\n        this.randomBttn.classList.add('loading');\n      }\n      const dataRandom = await this.fetchData(RANDOM_URL);\n\n      const urlById = ARTICLE_BY_ID.replace(\n        '§§§',\n        dataRandom.query.random[0].id\n      );\n      console.log(dataRandom);\n\n      const data = await this.fetchData(urlById);\n\n      this.setState({ body: data, loading: false }, () => {\n        document.documentElement.scrollTop = 0;\n        document.body.scrollTop = 0;\n        if (this.randomBttn) {\n          this.randomBttn.classList.remove('loading');\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  fetchWikiData = async (url = '') => {\n    if (this.randomBttn) {\n      this.randomBttn.classList.add('loading');\n    }\n    const sujet = this.state.pathName || (this.subject && this.subject.value);\n\n    const data = await this.fetchData(\n      url || ARTICLME_BY_TITLE.replace('§§§', sujet)\n    );\n\n    this.setState({ body: data, loading: false }, () => {\n      document.documentElement.scrollTop = 0;\n      document.body.scrollTop = 0;\n      if (this.randomBttn) {\n        this.randomBttn.classList.remove('loading');\n      }\n    });\n  };\n\n  render() {\n    const { body } = this.state;\n    console.log(body);\n    return (\n      <div className=\"App\">\n        <div className=\"progress-bar\">\n          <div ref={el => (this.progressBar = el)} />\n        </div>\n        {/* <div className=\"search\">\n          <input\n            type=\"text\"\n            ref={el => (this.subject = el)}\n            placeholder=\"Rechercher un article\"\n          />\n          <button type=\"submit\" onClick={this.fetchWikiData}>\n            Go\n          </button>\n        </div> */}\n        <div className=\"random\">\n          <button\n            type=\"submit\"\n            onClick={this.getRandomUrl}\n            ref={el => (this.randomBttn = el)}\n          >\n            <div className=\"donut\" />\n            <div className=\"content\">{zap}</div>\n          </button>\n        </div>\n        {body && body.parse && (\n          <>\n            <h1>{body.parse.title}</h1>\n            <div\n              dangerouslySetInnerHTML={{\n                __html: body.parse.text['*']\n              }}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}