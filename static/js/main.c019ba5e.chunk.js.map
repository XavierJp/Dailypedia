{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["zap","react_default","a","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","RANDOM_URL","ARTICLE_BY_ID","ARTICLE_BY_TITLE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","myHeaders","response","wrap","_context","prev","next","Headers","append","fetch","mode","headers","sent","abrupt","json","stop","_x","apply","arguments","getRandomUrl","_callee2","dataRandom","urlById","data","_context2","randomBtn","classList","add","replace","query","random","id","setState","body","loading","document","documentElement","scrollTop","remove","t0","console","error","fetchWikiData","_callee3","sujet","_args3","_context3","length","undefined","state","pathName","p","window","location","pathname","indexOf","split","_this2","addEventListener","progressBar","scrolled","scrollHeight","clientHeight","style","Math","round","_this3","className","ref","el","type","onClick","parse","Fragment","title","dangerouslySetInnerHTML","__html","text","React","PureComponent","Boolean","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c019ba5e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst zap = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\" />\n  </svg>\n);\n\nconst RANDOM_URL =\n  'https://fr.wikipedia.org/w/api.php?action=query&list=random&rnlimit=1&rnnamespace=0&format=json&origin=*';\nconst ARTICLE_BY_ID = `https://fr.wikipedia.org/w/api.php?action=parse&pageid=§§§&format=json&origin=*`;\nconst ARTICLE_BY_TITLE = `https://fr.wikipedia.org/w/api.php?action=parse&page=§§§&format=json&origin=*`;\n\nexport interface IProps {}\nexport interface IState {\n  pathName: string | null;\n  loading: boolean;\n  body: any | null;\n}\n\nexport default class App extends React.PureComponent<IProps, IState> {\n  private progressBar!: HTMLElement | null;\n  private randomBtn!: HTMLButtonElement | null;\n\n  public constructor(props: IProps) {\n    super(props);\n\n    const p =\n      window.location.pathname.indexOf('wiki') >= 0\n        ? window.location.pathname.split('/wiki/')\n        : [];\n    this.state = {\n      body: null,\n      loading: true,\n      pathName: p[p.length - 1] || null,\n    };\n    if (!this.state.pathName) {\n      this.getRandomUrl();\n    } else {\n      this.fetchWikiData();\n    }\n  }\n\n  public componentDidMount() {\n    document.addEventListener('scroll', () => {\n      if (!this.progressBar) {\n        return;\n      }\n      const winScroll =\n        document.body.scrollTop || document.documentElement.scrollTop;\n      const height =\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight;\n      const scrolled = (winScroll / height) * 100;\n      this.progressBar.style.width = Math.round(scrolled * 100) / 100 + '%';\n    });\n  }\n\n  private fetchData = async (url: string) => {\n    const myHeaders = new Headers();\n    myHeaders.append('Origin', '*');\n\n    const response = await fetch(url, {\n      mode: 'cors',\n      headers: myHeaders,\n    });\n\n    return response.json();\n  };\n\n  private getRandomUrl = async () => {\n    try {\n      if (this.randomBtn) {\n        this.randomBtn.classList.add('loading');\n      }\n      const dataRandom = await this.fetchData(RANDOM_URL);\n\n      const urlById = ARTICLE_BY_ID.replace(\n        '§§§',\n        dataRandom.query.random[0].id,\n      );\n\n      const data = await this.fetchData(urlById);\n\n      this.setState({ body: data, loading: false }, () => {\n        document.documentElement.scrollTop = 0;\n        document.body.scrollTop = 0;\n        if (this.randomBtn) {\n          this.randomBtn.classList.remove('loading');\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  private fetchWikiData = async (url = '') => {\n    if (this.randomBtn) {\n      this.randomBtn.classList.add('loading');\n    }\n    const sujet = this.state.pathName;\n\n    if (!url && !sujet) {\n      console.error('Should not happen');\n    }\n\n    const data = await this.fetchData(\n      url || ARTICLE_BY_TITLE.replace('§§§', sujet || ''),\n    );\n\n    this.setState({ body: data, loading: false }, () => {\n      document.documentElement.scrollTop = 0;\n      document.body.scrollTop = 0;\n      if (this.randomBtn) {\n        this.randomBtn.classList.remove('loading');\n      }\n    });\n  };\n\n  public render() {\n    const { body } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"progress-bar\">\n          <div ref={el => (this.progressBar = el)} />\n        </div>\n        {/* <div className=\"search\">\n          <input\n            type=\"text\"\n            ref={el => (this.subject = el)}\n            placeholder=\"Rechercher un article\"\n          />\n          <button type=\"submit\" onClick={this.fetchWikiData}>\n            Go\n          </button>\n        </div> */}\n        <div className=\"random\">\n          <button\n            type=\"submit\"\n            onClick={this.getRandomUrl}\n            ref={el => (this.randomBtn = el)}\n          >\n            <div className=\"donut\" />\n            <div className=\"content\">{zap}</div>\n          </button>\n        </div>\n        {body && body.parse && (\n          <>\n            <h1>{body.parse.title}</h1>\n            <div\n              dangerouslySetInnerHTML={{\n                __html: body.parse.text['*'],\n              }}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}